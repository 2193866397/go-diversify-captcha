package main

import (
	"fmt"
	"image"
	"image/color"
	"image/draw"
	"image/png"
	"math/rand"
	"os"
	"time"
)

const (
	width          = 200
	height         = 80
	numDots        = 50
	dotRadius      = 2
	outputFileName = "captcha.png"
)

func main() {
	// 设置随机种子
	rand.Seed(time.Now().UnixNano())

	// 创建一张空白的图片
	img := image.NewRGBA(image.Rect(0, 0, width, height))

	// 填充背景色
	fillBackground(img, color.White)

	// 随机填充小圆点
	drawRandomDots(img)

	// 保存图片到文件
	saveImage(img, outputFileName)
}

// 填充背景色
func fillBackground(img *image.RGBA, c color.Color) {
	draw.Draw(img, img.Bounds(), &image.Uniform{c}, image.Point{}, draw.Src)
}

// 随机填充小圆点
func drawRandomDots(img *image.RGBA) {
	for i := 0; i < numDots; i++ {
		x := rand.Intn(width)
		y := rand.Intn(height)

		// 随机选择颜色
		dotColor := getRandomColor()

		// 画小圆点
		drawDot(img, x, y, dotRadius, dotColor)
	}
}

// 画小圆点
func drawDot(img *image.RGBA, x, y, radius int, c color.Color) {
	for dx := -radius; dx <= radius; dx++ {
		for dy := -radius; dy <= radius; dy++ {
			if dx*dx+dy*dy <= radius*radius {
				img.Set(x+dx, y+dy, c)
			}
		}
	}
}

// 获取随机颜色
func getRandomColor() color.Color {
	return color.RGBA{
		uint8(rand.Intn(256)),
		uint8(rand.Intn(256)),
		uint8(rand.Intn(256)),
		255,
	}
}

// 保存图片到文件
func saveImage(img *image.RGBA, filename string) {
	file, err := os.Create(filename)
	if err != nil {
		panic(err)
	}
	defer file.Close()

	err = png.Encode(file, img)
	if err != nil {
		panic(err)
	}

	fmt.Println("验证码图片已生成:", filename)
}
